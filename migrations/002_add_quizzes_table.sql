-- Create the table for storing generated quizzes
create table quizzes (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text not null,
  source_topic text, -- The topic provided by the user
  level text, -- e.g., 'beginner', 'intermediate', 'expert'
  status text default 'pending'::text not null, -- 'pending', 'processing', 'completed', 'failed'
  quiz_content jsonb, -- The final generated quiz "game JSON"
  error_message text
);

-- Create the table for tracking user attempts at quizzes
create table quiz_attempts (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  quiz_id bigint references quizzes(id) on delete cascade not null,
  started_at timestamp with time zone default timezone('utc'::text, now()) not null,
  completed_at timestamp with time zone,
  score integer not null default 0,
  answers jsonb -- Store the user's answers for review
);

-- Enable Row Level Security
alter table quizzes enable row level security;
alter table quiz_attempts enable row level security;

-- Policies for quizzes table
create policy "Users can manage their own quizzes." on quizzes
  for all using (auth.uid() = user_id);

-- Policies for quiz_attempts table
create policy "Users can view their own attempts." on quiz_attempts
  for select using (auth.uid() = user_id);

create policy "Users can create their own attempts." on quiz_attempts
  for insert with check (auth.uid() = user_id);